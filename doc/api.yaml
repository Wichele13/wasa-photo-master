openapi: 3.0.0
info:
  title: WASAPhoto
  description: |-
    Rimani in contatto con i tuoi amici condividendo le foto dei momenti speciali, grazie a WASAPhoto! 
    Potete caricare le vostre foto direttamente dal vostro PC, che saranno visibili a tutti coloro che vi seguono.
  version: "1"

tags:
  - name: Login
    description: Operazioni di login
  - name: User
    description: Operazioni utente
  - name: Photo
    description: Operazioni foto
  - name: Ban
    description: Operazioni ban
  - name: Follow
    description: Operazioni follow
  - name: Like  
    description: Operazioni like
  - name: Comment
    description: Operazioni commento
    
paths:
    
  /session:

################################################################
#LOGIN

  # endpoint per la creazione di un nuovo utente
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema: { $ref: "#/components/schemas/login"}
        required: true
      responses:
        '201':
          description: User logged in action
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user"}
  
################################################################

################################################################
# UTENTI

  /user/{username}/setUsername:
    parameters:
    - $ref: "#/components/parameters/username"

    # endpoint per la modifica del nome utente
    put:
      security:
        - bearerAuth: [] 
      tags : ["User"]
      summary: Sets user username
      description: |-
        Sets user username.
      operationId: setMyUserName
      requestBody:
        description: Insert here your username
        content:
          application/json:
            schema: { $ref: "#/components/schemas/user"}
      responses:
        '200':
          description: Username created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/profile"}
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    

  /user/{username}/stream:
    parameters:
    - $ref: "#/components/parameters/username"

    # endpoint per ottenere lo stream dell'utente
    get:
      security:
        - bearerAuth: []
      tags : ["User"]
      summary: Gets user stream
      description: |-
        Gets user stream.
      operationId: getMyStream
      responses:
        '200':
          description: Stream retrieved successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/stream"}
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    # endpoint per ottener il nome utente
  /users/{username}/profile:
    parameters: 
      - $ref: "#/components/parameters/username"
    #* getUserProfile
    get:
      security:
      - bearerAuth : []
      tags: ["User"]
      summary: Return profile
      operationId: getUserProfile
      description: |-
        Return an user profile.
      responses:
        "200": 
          description: User profile retrived.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/profile"
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

################################################################
#FOTO ACTIONS
  /user/{username}/photos:
    parameters:
    - $ref: "#/components/parameters/username"

    # endpoint per la creazione di una nuova foto
    post:
      security:
        - bearerAuth: []
      
      tags: ["Photo"]
      summary: Posts a photo
      description: |-
        Posts a photo.
      operationId: postMyPhoto
      requestBody:
        description: Insert here your photo
        content:
          application/json:
            schema: { $ref: "#/components/schemas/photo"}
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo"}
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    # endpoint per cancellare una foto
    delete:
      security:
        - bearerAuth: []
      tags: ["Photo"]

      summary: Deletes a photo
      description: |-
        Deletes a photo.
      operationId: deleteMyPhoto
      responses:
        "204": { description: Photo deleted successfully. }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" } 

    # endpoint per ottenere le foto dell'utente                
    get:
      security:
        - bearerAuth: []
      
      tags: ["Photo"]

      summary: Gets user photos
      description: |-
        Gets user photos.
      operationId: getPhotos
      responses:
        "200": 
          description: User photos retrived.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/photosList"
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

################################################################
#BAN
  /user/{username}/banned/{banId}:
    parameters:
    - $ref: "#/components/parameters/username"
    - $ref: "#/components/parameters/banID"

    # endpoint per bannare un utente
    put:
      security:
        - bearerAuth: []
      tags : ["Ban"]

      summary: Bans a user
      description: |-
        Bans a user.
      operationId: banUser
      requestBody:
        description: Insert here the user to ban
        content:
          application/json:
            schema: { $ref: "#/components/schemas/profile"}
      responses:
        "201": 
          description: User banned successfully.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ban"
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
    # endpoint per sbannare un utente
    delete:
      security:
        - bearerAuth: []
      tags : ["Ban"]
      summary: Unbans a user
      description: |-
        Unbans a user.
      operationId: unbanUser
      responses:
       "204": { description: Ban deleted successfully. }
       "400": { $ref: "#/components/responses/BadRequestError" }
       "401": { $ref: "#/components/responses/UnauthorizedError" }
       "500": { $ref: "#/components/responses/InternalServerError" }

  /user/{username}/banned:
    # endpoint per ottenere la lista degli utenti bannati
    parameters:
    - $ref: "#/components/parameters/username"
    get:
      security:
        - bearerAuth: []
      tags : ["Ban"]
      summary: Gets user ban list
      description: |-
        Gets user ban list.
      operationId: getBanList
      responses:
        "200": 
          description: User bans retrived successfully.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ban"
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

################################################################
#FOLLOWERS
  /user/{username}/followers/{followId}:
    parameters:
    - $ref: "#/components/parameters/username"
    - $ref: "#/components/parameters/followID"
    
    # endpoint per seguire un utente
    put:
      security:
        - bearerAuth: []
      
      tags : ["Follow"]
      summary: Follows a user
      description: |-
        Follows a user.
      operationId: followUser
      requestBody:
        description: Insert here the user to follow
        content:
          application/json:
            schema: { $ref: "#/components/schemas/profile"}
      responses:
        "201": 
          description: User followed successfully.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/follow"
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    # endpoint per smettere di seguire un utente
    delete:
      security:
        - bearerAuth: []
      tags : ["Follow"]

      summary: Unfollows a user
      description: |-
        Unfollows a user.
      operationId: unfollowUser

      responses:
        '200':
          description: User unfollowed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/profile"}
        '404':
          description: |
            User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

  /user/{username}/followers:
    parameters:
    - $ref: "#/components/parameters/username"
    # endpoint per ottenere la lista dei followers
    get:
      security:
        - bearerAuth: []
      tags : ["Follow"]

      summary: Gets user followers
      description: |-
        Gets user followers.
      operationId: getFollowers
      responses:
        "200": 
          description: User followers retrived successfully.
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/follow"

        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
################################################################
#LIKES
  /user/{username}/photos/{id}/likes/{likeId}:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref : "#/components/parameters/photoID"
      - $ref : "#/components/parameters/likeID"
    # endpoint per mettere like ad una foto      
    put:
      security:
        - bearerAuth: []
      
      tags : ["Like"]
      summary: Likes a photo
      description: |-
        Likes a photo.
      operationId: likePhoto
      requestBody:
        description: Insert here the photo to like
        content:
          application/json:
            schema: { $ref: "#/components/schemas/photo"}
      responses:
        '201':
          description: Photo liked successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo"}
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

    # endpoint per togliere like ad una foto                
    delete:
      security:
        - bearerAuth: []
      tags : ["Like"]
      summary: Removes a like from a photo
      description: |-
        Unbans a user.
      operationId: unLikePhoto

      responses:
        "204": { description: Like removed successfully. }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
   

  /user/{username}/photos/{id}/likes:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref : "#/components/parameters/photoID"

    # endpoint per ottenere la lista dei like di una foto      
    get:
      security:
        - bearerAuth: []
      
      tags : ["Like"]
      summary: Gets photo likes
      description: |-
        Gets photo likes.
      operationId: getLikes
      responses:
        '200':
          description: Likes retrieved successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo"}
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequestError" }

################################################################
# COMMENTI 



  /user/{username}/photos/{id}/comments/{commentsId}:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref : "#/components/parameters/photoID"
      - $ref : "#/components/parameters/commentID"
    
            
    # endpoint per commentare una foto
    put:
      security:
        - bearerAuth: []
      tags : ["Comment"]
      summary: Comments a photo
      description: |-
        Comments a photo.
      operationId: commentPhoto
      requestBody:
        description: Insert here the photo to comment
        content:
          application/json:
            schema: { $ref: "#/components/schemas/photo"}
      responses:
        '201':
          description: Photo commented successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/photo"}
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequestError" }
    # endpoint per ottenere la lista dei commenti di una foto
    get:
      security:
        - bearerAuth: []
      tags : ["Comment"]
      summary: Gets photo comments
      description: |-
        Gets photo comments.
      operationId: getComments
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/commentsList"}
        '400': {$ref: "#/components/responses/BadRequestError"}
        '401': {$ref: "#/components/responses/UnauthorizedError"}
        '500': {$ref: "#/components/responses/InternalServerError"}
    # endpoint per rimuovere un commento ad una foto
    delete:
      security:
        - bearerAuth: []
      tags : ["Comment"]
      summary: Removes a comment from a photo
      description: |-
        Removes a comment from a photo.
      operationId: removeComment

      responses:
        "204": { description: Comment deleted successfully. }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        "400": { $ref: "#/components/responses/BadRequestError" }

################################################################
################################################################

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  parameters:
    username:
      schema:
          description: user schema.
          type: string
          pattern: '^.*?$'
          example: MikeRossi
          minLength: 3
          maxLength: 30
      name: user
      in: path
      required: true
      description: "username of user."

    photoID:
      schema:
        description: photoID schema.
        type: string
        pattern: '^.*?$'
        example: "#P1234"
        minLength: 3
        maxLength: 16
      name: photoId 
      in: path
      required: true
      description: "photoId of a single photo."
    
    commentID:
      schema:
        description: commentID schema.
        type: string
        pattern: '^.*?$'
        example: "#C1234"
        minLength: 3
        maxLength: 16
      name: commentId
      in: path
      required: true
      description: "commentId of a single comment under a photo."

    likeID:
      schema:
        description: likeID schema.
        type: string
        pattern: '^.*?$'
        example: "#L1234"
        minLength: 3
        maxLength: 16
      name: likeId
      in: path
      required: true
      description: "likeId of a single like on a photo."

    followID:
      schema:
        description: followID schema.
        type: string
        pattern: '^.*?$'
        example: "#F1234"
        minLength: 3
        maxLength: 16
      name: followId
      in: path
      required: true
      description: "*followId of a single follow on a user."

    banID:
      schema:
        description: banID schema.
        type: string
        pattern: '^.*?$'
        example: "#B1234"
        minLength: 3
        maxLength: 16
      name: banId
      in: path
      required: true
      description: "*banId of a single ban on a user."



  responses:

    #401
    UnauthorizedError:
      description: |
        Invalid or missing authentication token.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid or missing authentication token"
    
    #400
    BadRequestError:
      description: |
        Invalid request body.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid request body"
    
    #500
    InternalServerError:
      description: |
        Internal server error.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal server error"


  schemas:

    # schema per l'utente
    username:
      
      title: User
      description: This object is the user.
      type: object

      # le proprietà dell'utente
      properties:
        username:
          description: Unique username.
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: Mario_Rossi_01
        # id dell'utente
        userId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: "$1234"
    
  #schema per il like
    like:
      title: like
      description: Like schema.
      type: object

      # le proprietà del like
      properties:
        likeid:
          description: Unique like identifier.
          type: string
          pattern: '^.*?$'
          minLength: 2
          maxLength: 10
          example: $L1234
        userId:
          description: Unique user identifier.
          type: string
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
          example: $1234
        photoId:
          description: Unique photo identifier.
          type: string
          example: $P1234
          pattern: '^.*?$'
          minLength: 3
          maxLength: 10
        photoOwner:
          description: Unique user identifier.
          type: string
          minLength: 3
          maxLength: 10
          pattern: '^.*?$'
          example: $1234

    # schema per il profilo utente
    profile:
      title: Profile
      description: This object is the user Profile.
      type: object

      # le proprietà del profilo
      properties:
        username:
          description: Unique username.
          type: string
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
          example: Mario_Rossi_01

        # id dell'utente
        userId:
          description: Unique user identifier.
          type: string
          minLength: 3
          maxLength: 10
          pattern: '^.*?$'
          example: $1234
        
        # numero di followers dell'utente
        followersNumber:
          description: user followers number.
          type: integer
          minimum: 0
          maximum: 9999
          example: 0

        # numero di following dell'utente
        followingNumber:
          description: user following number
          type: integer
          minimum: 0
          maximum: 999999999
          example: 0

        # numero di foto dell'utente
        photoNumber:
          description: user photo number.
          type: integer
          minimum: 0
          maximum: 999999999
          example: 0
        
        # stato del follow
        followStatus:
          description: Shows if the user is followed
          type: boolean
          example: true

        # stato del ban
        banStatus:
          description: Shows if the user is banned
          type: boolean
          example: true
        
        # request id
        requestId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "$1234"
          minLength: 3
          maxLength: 16
        
        #checkIfBanned
        checkIfBanned:
          description: Shows if the user is banned
          type: boolean
          example: true
        

    # schema per la foto
    photo:
      title: photo
      description: This object is the photo.
      type: object

      # le proprietà della foto
      properties:

        # id della foto
        photoid:
          description: Identifies the photo
          type: string
          pattern: '^.*?$'
          example: photo.jpg
          minLength: 3
          maxLength: 10

        # la foto
        photoFile:
          description: The photo to upload
          type: string
          pattern: '^.*?$'
          minLength: 4
          maxLength: 200
          format: binary
        
        # id dell'utente che ha caricato la foto
        userId:
          description: Identifies the user
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 10
          example: $1234
        
        # stato del like
        likeSetCheck:
          description: Identifies if the user has liked the photo
          type: boolean
          example: true
          readOnly: true

        # descrizione della foto
        description:
          description: The photo description
          type: string
          minLength: 0
          maxLength: 200
          pattern: '^.*?$'
          example: "This is a photo"

        # numero di like della foto  
        likeNumber:
          description: The photo like counter
          type: integer
          example: 0
          minimum: 0
          maximum: 99999

        # numero di commenti della foto
        commentsNumber:
          description: The number of comments of the photo
          type: integer
          minimum: 0
          maximum: 99999
          example: 0

        # data di caricamento della foto
        date:
          description: The photo upload date
          type: string
          pattern: '^.*?$'
          minLength: 4
          maxLength: 11
          example: "13-10-2000"
    
    # schema per la stream di foto
    photostream:
      title: photoStream
      description: This object is the stream of photos.
      type: object

      # le proprietà della lista di foto
      properties:

        # id dell'utente
        userId:
          description: Identifies the user
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 10
          example: $1234
          readOnly: true

        photos:
          description: The list of photos
          type: array
          items:
            $ref: "#/components/schemas/photo"
          minimum: 0
          maximum: 99999
          readOnly: true
  
  # schema per la lista di foto
    photosList: 
      title: photosList
      description: Photos schema.
      type: object

      properties:
        requestId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234" 
          minLength: 3
          maxLength: 10

        identifier:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "#U1234" 
          minLength: 3
          maxLength: 16
          
        photos: 
          description: list of objects (each object is a photo)
          type: array
          minItems: 0
          maxItems: 99999
          items:
            type: object

            properties:
              Id: 
                description:  Unique photo identifier.
                type: string
                pattern: '^.*?$'
                example: "#P1234"
                minLength: 3
                maxLength: 16

              userId:
                description: Unique user identifier.
                type: string
                pattern: '^.*?$'
                example: "#U5678" 
                minLength: 3
                maxLength: 16

              file: 
                description: file
                type: string
                pattern: '^.*?$'
                format: binary
                minLength: 3
                maxLength: 16

              date:
                description: Data-orario di caricamento della foto.
                type: string
                format: date-time
                pattern: '^.*?$'
                example: "2022-11-02T09:00:00Z"
                minLength: 3
                maxLength: 9999

              likeNumber:
                description: photo likes count.
                type: integer
                example: 0
                minimum: 0
                maximum: 9999

              commentNumber:
                description: photo comments count.
                type: integer
                example: 0
                minimum: 0
                maximum: 9999

              likeStatus:
                description: photo like status.
                type: boolean
                example: true

    # schema per il follow
    follow:
      title: follow 
      description: Follow schema
      type: object
      properties:

        followId:
          description: followID 
          type: string
          pattern: '^.*?$'
          example: "$U1234"
          minLength: 3
          maxLength: 16

        followedId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "$U4321"
          minLength: 3
          maxLength: 16

        userId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "$U1234"
          minLength: 3
          maxLength: 16
        
    # schema per il login
    login:
      title: login
      description: Login schema.
      type: object

      # le proprietà del login
      properties:

        username:
          description: Unique username.
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: Mario_Rossi_01

    # schema per la lista di commenti
    commentsList: 
          title: commentsList
          description: Comments List schema.
          type: object
          properties:
            
            # id dell'utente che ha caricato il commento
            requestId:
              description: requesting identifier.
              type: string
              pattern: '^.*?$'
              example: "$1233"
              minLength: 3
              maxLength: 16
            
            # id della foto a cui è stato caricato il commento
            photoId: 
              description: photo identifier.
              type: string
              pattern: '^.*?$'
              example: "#P1234"
              minLength: 3
              maxLength: 16
            
            # id dell'utente che ha caricato la foto
            photoOwner:
              description: Unique user identifier.
              type: string
              pattern: '^.*?$'
              example: "$1234"
              minLength: 3
              maxLength: 16

            # lista dei commenti
            comments: 
              description: list of objects(comments).
              type: array
              minItems: 0
              maxItems: 99999
              items:
                type: object
                properties:
                  id:
                    description: Unique comment identifier.
                    type: string
                    pattern: '^.*?$'
                    example: "#C1234"
                    minLength: 3
                    maxLength: 16
                  userId:
                    description: Unique user identifier.
                    type: string
                    pattern: '^.*?$'
                    example: "#ID5678" 
                    minLength: 3
                    maxLength: 16
                  photoId: 
                    description:  Unique photo identifier.
                    type: string
                    pattern: '^.*?$'
                    example: "#P1234"
                    minLength: 3
                    maxLength: 16
                  photoOwner:
                    description: Unique user identifier.
                    type: string
                    pattern: '^.*?$'
                    example: "#ID1234"
                    minLength: 3
                    maxLength: 16
                  photoOwnerUsername:
                    description: User username.
                    type: string
                    pattern: '^.*?$'
                    example: MikeRossi
                    minLength: 3
                    maxLength: 16
                  username:
                    description: User username.
                    type: string
                    pattern: '^.*?$'
                    example: MikeRossi
                    minLength: 3
                    maxLength: 16
                  content:
                    description: Content of the comment.
                    type: string
                    pattern: '^.*?$'
                    example: "I'm a comment!"
                    minLength: 2
                    maxLength: 30

    # schema per il commento
    comment:
      title: comment
      description: This object is a comment.
      type: object  

      # le proprietà del commento
      properties:
        content:
          description: content of the comment
          type: string
          pattern: '^.*?$'
          minLength: 1
          maxLength: 200
          example: Hi, I'm a comment!

    # schema per il ban
    ban:
      title: ban
      description: Ban schema.
      type: object

      # le proprietà del ban
      properties:
        bannedId:
          description: user banned identifier.
          type: boolean
          example: true
        
        userId:
          description: Unique user identifier.
          type: string
          pattern: '^.*?$'
          example: "$U1234"
          minLength: 3
          maxLength: 16
        
        banId:
          description: Unique ban identifier.
          type: string
          pattern: '^.*?$'
          example: "$B1234"
          minLength: 3
          maxLength: 16
